一，部分常见的内建函数：

标识id函数：id()  返回对象的唯一标识，CPython中返回的是一个内存地址

哈希函数：hash()  如果有hash值的话，返回对象的hash值，这是一个整数，hash值可用于快速的查找字典中的键，
相同大小的数字变量有相同的hash值（比如1和1.0）

类型函数：type()  传入一个参数时，返回object类型，返回值是一个type对象，用于查看对象的类型，不过推荐使
用isinstance()  来检测类型，因为会考虑子类的情况

类型转换：
    float() 返回的是生成的浮点数

    int() 返回的是生成的整数类型，如果无实参则返回0

    bin() 将一个整数转换成前缀为“0b”的二进制字符串

    hex() 将一个整数转换为前缀是“0x”的小写十六进制字符串

    oct() 将一个整数转换为前缀为“0o”的八进制字符串

    bool() 返回一个bool值，True或False

    list() 生成一个列表

    tuple() 生成一个元组

    dict() 生成一个字典

    set() 生成一个set集合

    complex() 返回值是一个复数

    bytes() 返回的是一个不可变的bytes字节对象，包含范围为 [0,256)的整数

    bytearray() 返回的是一个可变的bytes数组，包含范围为[0,256)的整数

输入函数：input() 接收用户输入的信息，这个函数返回的是一个字符串类型

打印函数：print() 打印函数，打印输出，默认是以空格进行分隔，换行结尾

对象长度：len() 这是一个长度函数，返回一个集合类型的元素个数

判断函数：
    isinstance() 判断一个对象，看对象是否属于某个类型或元组中列出的某个类型，如isinstance(True, int)

    issubcalss() 判断一个类型是否是某种类型的子类或元组中列出的某个类型的子类，如issubclass(bool, int)

绝对值函数：abs() 返回一个数值的绝对值

最大值函数：max()，返回可迭代对象的最大值或多个参数的最大值

最小值函数：min()，返回可迭代对象的最小值或多个参数的最小值

round() 四舍六入五取偶，遇到0.5之类的小数会去邻近的偶数

pow(x, y) 等价于 x ** y

range()  range是一个可迭代对象，范围左闭右开，另外可以设置step步长

divmod(x, y) 等价于tuple(x//y, x%y)，函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组

求和函数：sum()，对可迭代对象的所有数值进行求和

chr() 给一个一定范围的整数返回对应的字符 

ord()  返回字符对应的整数

排序函数：sorted()，返回的是一个新列表，默认情况下是升序

翻转函数：reversed()，返回的一个翻转元素的迭代器

枚举函数：enumerate(seq, start=0)，迭代一个序列，返回索引数字和元素构成的二元组，start表示索引开始
的数字，默认是0

迭代器函数：
    iter()，把一个可迭代对象封装成一个迭代器

    next() 这个函数结合迭代器一起使用，这是对一个迭代器取下一个元素，如果全部元素都取完了，则抛出StopIteration

拉链函数：zip()，将多个可迭代对象合并在一起，返回一个迭代器，从迭代器中拿出不同对象组成的元组

映射函数：map(function, iterable, ....)，会根据提供的函数对指定序列做映射。map函数会根据传入的函数关系来处理
可迭代对象，最后返回的是一个列表

super()函数，用于调用父类的一个方法，解决类的多继承问题

二，标准库datetime
标准库datetime模块是对日期，时间，时间戳的处理
用法：
1.datetime.datetime类
datetime对象的构造方法：
datetime.datetime(2019, 9, 14, 23, 51, 20) <->(年，月，日，时，分，秒)
datetime类的其他用法：
datetime.datetime(2019, 9, 14).today() 返回本地时区当前时间的datetime对象，datetime类参数最少要有年月日
datetime.datetime(2019, 9, 14).now(tz=None) 返回当前时间的datetime对象，时间到微妙，tz为None，
返回和today() 一样，tz参数必须是none或者tzinfo子类

datetime.datetime(2019, 9, 14).utcnow() 没有时区的当前时间
datetime.datetime(2019, 9, 14).fromtimestamp(timestamp, tz=None)从一个时间戳返回一个datetime对象
datetime.datetime(2019, 9, 14).timestamp() 返回一个到微妙的时间戳

datetime.datetime(2019, 9, 14, 23, 51, 20).weekday() 返回周几，周一是0，周日是6
datetime.datetime(2019, 9, 14, 23, 51, 20).isoweekday() 返回周几，周一是1，周日是7
datetime.datetime(2019, 9, 14, 23, 51, 20).date() 返回日期date对象  #2019-09-14
datetime.datetime(2019, 9, 14, 23, 51, 20).time() 返回时间time对象
datetime.datetime(2019, 9, 14, 23, 51, 20).replace() 修改并返回新时间
datetime.datetime(2019, 9, 14, 23, 51, 20).isocalendar() 返回一个(年，周数，周天)的三元组

日期格式化方法：
strptime(date_string, format) 返回datetime对象
strftime(format) 返回字符串
datetime.datetime.strptime(date_string, format)
dt = datetime.datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')
dt.strftime('%Y-%m-%d %H:%M:%S)

2.datetime.timedelta类
timedelta是时间差，timedelta可以是datetime1-datetime2 也可以是 datetime2-datetime1
构造方法：datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
year = datetime.timedelta(days=365)
datetime.timedelta.total_seconds() 返回时间差的总秒数

三，解析式
1.列表解析式
[返回值 for 元素 in 可迭代对象 if 条件句]
列表解析式是一种语法糖，内部是一个for循环，if条件句可选，返回值写在前面，返回的一个新列表
python中从编译器层面上对解析式做了专门的优化，所以说像列表解析式，集合解析式，字典解析式
等解析式不仅用起来简洁，而且更高效

2.字典解析式
{返回值 for 元素 in 可迭代对象 if条件句}
字典解析式返回值使用kv对的形式，返回的是一个字典

3.集合解析式
{返回值 for 元素 in 可迭代对象 if 条件句}
返回值不是kv对的形式就是集合解析式，返回一个集合

4.解析式进阶
解析式中出现多个for循环语句就是多层循环嵌套关系，多个if条件语句就是and关系

四，生成器
1.生成器表达式
(返回值 for 元素 in 可迭代对象 if 条件句)
这个叫生成器表达式，返回的是一个生成器
解析式是立即返回结果，生成器不是。
生成器表达式返回的是一个生成器对象，讲究的是惰性求值，按需计算，你需要的时候才给你计算，不需要就不计算，
拨一下转一下。
生成器是可迭代对象，也是迭代器
生成器表达式的求值需要用next()函数从里面一个个的取出来

2.next()函数是专门与生成器，迭代器相结合使用的，next从头到尾从里面拿出元素，只能走一遍，不能掉头，里面有
元素就往外拿，没有元素了就报StopIteration，所以next一般都与for循环结合使用，一次全部迭代出来不会报错

3.生成器表达式与解析式(推导式)对比：
从计算方式来说，生成器表达式是延时计算的，需要哪个结果现给你计算，不要就不计算，解析式是直接给你返回结果

从内存占用上来说，从返回值上来说，生成器表达式没有返回值，只是返回一个生成器对象，比较省内存，解析式是直
接有返回值的。然后生成器的内存数据的占用是一点点往上升的，而解析式特别是列表解析式是需要直接开辟出一个连
续的大空间，虽然最后生成器计算完，结果内存占用都差不多。

计算速度方面，生成器表达式的耗时比列表解析式要短，一次计算一个跟一次计算所有，时间上生成器占优。
所以说到底是选择生成器还是选择解析式最后还是要看需求，如果需要一次性的就拿到结果，那么生成器不占优。

4.生成器函数
生成器函数是使用关键字yield得到的一个函数，调用这个函数得到一个生成器对象，每次调用时yield都会暂停
生成器函数得到的生成器对象依然具有延时计算，惰性求值的特性。在得到这个生成器对象的时候，生成器函数
的函数体不会立即执行
生成器函数与生成器表达式是等价的，只不过生成器函数可以写的更加复杂
在应用方面可以处理无限循环问题，递归问题，协程问题等
yield from iterable 是 for item in iterable: yield item 的语法糖，前后是等价的

五，可迭代对象和迭代器
1.可迭代对象：
能够通过迭代一次次的返回不同的元素的对象，就是可迭代对象。相同与不同指的是内存地址是否是一个，内存地址
不同哪怕值相同也是不同的对象。
可迭代对象未必是有序的对象，可迭代对象有：list，tuple，set，dict，string，bytes，bytearray，range，生成器
可迭代对象可以使用成员操作符in，not in，in本质上就是在遍历对象

2.迭代器是一种特殊的对象，迭代器一定是可迭代对象，具有可迭代的特性
通过iter()方法或者类里的__iter__方法把一个可迭代对象封装成迭代器
通过next()方法迭代 迭代器
生成器对象就是迭代器对象，但是迭代器不一定是生成器对象









