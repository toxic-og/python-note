集合和字典是比较像的，这两种数据结构放在一起整理。
一，集合
(一).集合set的性质：
集合中的元素必须是和hash的，比如list，set等数据结构不可hash，不能进集合
集合中的元素是可变的，无序的，去重的，集合中的元素不能进行索引
集合是一种可迭代的数据结构

(二).集合的增删改查
1.增加元素 add方法和update方法
(1) add(elem)
增加一个元素进入set中
如果增加的元素已经存在，则什么都不做
(2) update(*others)
合并其他元素进入集合中，other必须是可迭代对象
就地修改
2.删除元素 remove方法，discard方法和pop方法
(1)remove(elem)
从集合中移除一个元素，元素不存在抛出KeyError
(2)discard(elem)
从集合中移除一个元素，元素不存在什么也不做
(3)pop()
移除并返回任意的元素(因为无序，所以随机移除)，空集返回KeyError
3.修改元素
集合没有修改元素的操作方法，因为集合中的元素是去重的，也保证了唯一性，那么对一个元素修改本质上就是
添加或者说删除。
4.查询元素
集合是无序的，无法使用索引，因此查询元素只能使用遍历的方法。

(三).集合的其他操作
1.基本概念
全集：所有元素的集合
子集和超集：一个集合A所有的元素都在另一个集合B中，A是B的子集(subset)，B是A的超集(superset)
真子集和真超集：A是B的子集，但是A不等于B，A是B的真子集，B是A的真超集
子集的话A可能等于B，但是真子集的话，A只能小于B但是绝对不能等于B
2.set的集合运算
(1)交集运算：两个集合相交的公共部分
set.intersection(*others) 直接返回和多个集合的交集，返回一个新集合
intersection 等同于符号 '&'  比如：set1 & set2
set.intersection_update(*others) 获取多个集合的交集，直接就地修改
intersection_update 等同于符号 '&=' 
(2)并集运算：将两个集合所有元素组成一起形成一个新集合
set.union(*others) 返回一个和多个集合合并之后的新集合
union 等同于符号 '|'  比如：set1|set2
set.update(*others) 和多个集合合并之后，直接就地修改
update 等同于符号 '|='
(3)差集运算：A差B就是由所有属于A且不属于B的元素组成的集合，B差A就是所有属于B且不属于A的元素的集合
set.difference(*others) 返回和多个集合的差集
difference等同于符号 '-' 
set.difference_update(*others) 返回和多个集合的差集并就地修改
difference_update等同于符号 '-='
(4)对称差集运算：集合A和B，由所有不属于A和B的交集元素组成的集合
set.symmetric_differece(other) 返回和另一个集合的差集
symmetric_differece等同于符号 '^'
set.symmetric_differece_update(other) 返回和另一个集合的差集并就地修改
symmetric_differece_update等同于符号 '^='
以上的三种或者四种集合运算基本上都有两个方法，一个返回一个新集合，一个直接就地修改原集合
(5)判断子集，真子集，超集，真超集
set1 <= set2 或者 set1.issubset(set2) 判断set1是不是set2的子集
set1 < set2 判断set1是不是set2的真子集
set1 >= set2 或者 set1.issuperset(set2) 判断set1是不是set2的超集
set1 > set2 判断set1是不是set2的真超集
set1.isdisjoint(set2) 判断set1和set2没有交集，没有交集返回True

(四).集合的应用
集合和字典是很相像的，集合中放着的元素其实就是字典中的key，但是在某些情况下用集合还是很有效率的
1.共同好友问题
你的好友A, B, C 和他的好友C, B, D, Z 求共同的好友
这就是一个交集问题：{'A', 'B', 'C'}.intersection({'B', 'C', 'D', 'Z'})
2.微信群提醒问题
X和群里的任何人都不是微信好友关系
并集解决：X的userid in (A|B|C|D|....) == False  
A|B|C|D...这是一个微信群里面所有成员的好友列表的大丙集，X的userid不在这个并集中，说明跟谁都不是好友
交集解决：T & IDs == set() 
T是X的好友列表集合，IDs是群里其他成员组成的id集合，这两个集合相交是空集，说明跟谁都不是好友
3.权限判断问题
有一个API，要求权限同时具备A,B,C才能访问，用户权限是B,C,D,判断用户是否有访问权限
API的权限是集合A, 用户的权限是集合P
A - P = {} 或者 A.issubset(P) 或者 A & P = A 这三种都表示集合A小于等于集合p，那么p就有权限
如果说访问API的权限只需要是A,B,C中的任意个就行，那么只要表示出集合A和集合B有交集就行
A & B != {} 或者 A.isdisjoint(P) == Flase

二，字典
(一)，字典的性质
字典就是key-value组成的键值对的数据集合
字典中最重要的就是key，key是可变的，无序的，不重复，key重复时后面覆盖前面，key值必须是可哈希的
value值一般来说是可以是任意的对象，不可哈希的数据结构也可以做value
value也可以是重复的，只要key不一样就行，有一种字典是多值字典正好反过来，key可以对应多个value不覆盖
初始化一个字典，最常用的就是直接写，用key=value创建
也可以用dict(iterable)创建字典，iterable可迭代对象必须是一个二元结构，比如dict( ([1,3], [2,5]) )

(二)，字典的增删改查
1.增加/修改元素 
dict[key] = value 直接将对应的key值修改成新的value，如果key不存在就增加k-v对
update([other]) 使用另一个字典的kv对更新本字典，key不存在就添加，存在就覆盖原有kv对，就地修改
2.删除元素
pop(key[, default])
key存在时移除key并返回对应的value值
key不存在时，如果设置了缺省就返回缺省，如果没有设置缺省就抛出KeyError
popitem()
移除并返回一个任意的键值对，字典为空时抛出KeyError异常
del语句的删除，本质上只是删除了对象的引用，也就是删掉了标识符，而不是对象
3.查找元素
dict[key] 返回key对应的value值，key不存在抛出KeyError
get(key[, default]) 返回key对应的value值，key不存在可以返回缺省值
setdefault(key[, default]) 返回key对应的value值，key不存在就添加新的kv对，如果value没有设置缺省，则缺省为None
(三)，字典的其他操作
1.字典的遍历
for k in dict:
    #print(k)
    print(d[k])
for k in dict.keys():
    #print(k)
    print(d.get(k))
for v in dict.value():
    print(v)
for item in d.items():
    #print(item)
    print(item[0], item[1])
for k, v in d.items():
    print(k, v)
2.在遍历中移除字典key
d = {1:3,  'a':9,  4:[33]}
keys = []
for k, v in d.items():
    keys.append(k)
for k in keys:
    d.pop(k)
这样就在遍历中删空了字典，因为字典是动态变化的，不能直接遍历进行删除
3.缺省字典
collections.defaultdict([default_factory[, ...]])
default_factory缺省值为None，当key值不存在的时候，会调用这个工厂函数生成key对应的value
4.有序字典
collections.OrderedDict([items])
有序字典key记录元素插入的顺序，打印的时候也是按照这个顺序打印
