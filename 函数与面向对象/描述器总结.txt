1.描述器是什么，我理解的描述器首先要实现描述器需要涉及到两个类，A类和B类，在B类中出现了A类的实例，那么这中间
就产生了描述器，代码路线会绕道经过A类的一顿描述，操作，最后在返回B类。

2.描述器的方法，描述器有三个方法：__get__(), __set__(), __delete__()。只要在类中实现了任意的一个就是描述器。其中只实
现get方法是非数据描述器，在get的基础上但凡实现了set和delete或者其中之一，就是数据描述器。也就是说要实现描述器
最少也得是get方法

3.描述器的参数 __get__(self, instance, owner) 
 self -> 主要是看在哪个类中实现了get，在A类中实现了那么self就是A类实例自身
 instance -> 我理解的instance是指的被描述的那个类的实例，也就是B类的实例，一共就两个类，除了A就是B，A是self了
那么B就一定是instance了
 owner -> 属主的意思，也就是class B ，owner是一个类

__set__(self, instance, value)
前两个参数都一样
value -> 指的是添加的值  
当在类B中出现了类似b.a = value 之类的情况时，就是调用了set方法（a是A类的实例）但是如果没有set方法，那么就直接
覆盖了，赋值即重新定义

self是一定会有的，owner也是一定会有的，但是instance可能有可能没有，当直接用类进行访问时，instance是none。当用
类的实例访问时，instance是实例对象

4.当涉及到描述器时，类属性的访问顺序
一般而言，一个类在访问属性时，会先找自己实例字典，实例字典中没有在去查找类字典，类字典没有在往上查找继承类的字
典，一层层往上知道object，都没有抛异常。但是当涉及到描述器时，如果只有get方法，那么还是这个顺序，会先查找自己实
例的字典，也就是说实例的字典是优于非数据描述器的，但是如果有了set或者delete时，就会优先去访问数据描述器，这时的
数据描述器是优于实例字典的。

5.在python中有staticmethod() 和 classmethod() 都是实现了非数据描述器， property() 是实现了数据描述器，因此经过
propert装饰过的函数，在实例中是不能进行覆盖的