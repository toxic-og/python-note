魔术方法：
1.创建，初始化和销毁
__new__ 方法

class A:
    def __new__(cls, *args, **kwargs):
        print(cls)
        print(args)
        print(kwargs)
        return super().__new__(cls)

    def __init__(self):
        print('!!!!!!!!!!!!!!!!!')

a = A()
print(a)

注意这么几点：
1.new方法和init是同时出现的，先用new进行实例的创建，然后在通过init进行实例的初始化。
2.new方法必须有返回值，没有返回值的new方法是无法init的
3.new方法的返回值应该是一个类的实例，并且这是一个静态方法。
4.new这个方法用的很少，因为这就是一个创建实例的过程，没有什么值得修改或者做文章的地方，一般也没有定义出来的，
直接用objec的new方法来实例化就行

分析return值：
1.new要想跟init连在一起使用，必须有一个类的实例，所以需要new返回一个实例对象。什么都不写或者return None
都是不行的。
2.实例对象本质是什么？  →  → cls（） 这就是实例对象，但是这里不能直接写cls（） 因为会出现递归问题。所以用
super().__new__(cls) 这种方法，cls要自己传进去，因为静态方法。

2. __hash__  方法 和 __eq__方法

class A:
    def __init__(self, name, age = 18):
        self.name = name
        self.x = 40

    def __hash__(self):
        return 1

    def __repr__(self):
        return self.name

#a = A('tom')
print(hash(A('tom')))
print((A('tom'),A('tom')))
print([A('tom'),A('tom')])

s = {A('tom'),A('tom')}
print(s)
print({tuple('t'),tuple('t')})
print({'tom','tom'})
print({('tom',),('tom',)})

打印结果
1
(tom, tom)
[tom, tom]
{tom, tom}
{('t',)}
{'tom'}
{('tom',)}

从这个结果可以看出来，实例中如果只是定义了hash方法，是没办法去重的。去重还需要eq方法，两个方法连起来用才会去重。
后面的三条打印之所以会去重，是因为后面的方法跟A的实例无关，而且找了内建函数，先hash在eq一条龙下来，就去重了。

__eq__ 方法

class A:
    def __init__(self, name, age = 18):
        self.name = name
        self.x = 40

    def __hash__(self):
        return 1

    def __eq__(self, other):
        return self.name == other.name

    def __repr__(self):
        return self.name

#a = A('tom')
print(hash(A('tom')))
s = {A('tom'),A('tom')}
print(s)

执行结果：
1
{tom} 去重了

现在set就可以去重了，因为有了eq 。注意eq的返回值，不是is 是 == 。is比较的是内存地址，两个完全一样，==内存
地址可以不一样，但是内容一样。这是有区别的。
__eq__ 这个方法与__hash__连用就可以解决去重的问题。eq属于一种操作符重载，等价于操作符==，判断两个对象是否
相等，返回的是bool值。

为什么说hash要和eq搭配才能解决去重问题呢？ 因为hash方法只是返回一个hash值，通过这个值来找key，这个hash值
是有相等的情况出现的，也就是hash冲突，但是出现hash冲突并不能代表两个对象是相等的，所以需要eq来判断是不是
相等的对象。
hash冲突是一种相对常见的现象。如果数据量超过了空间的大小，那么算出来的hash值就有相同的情况，就是hash冲突。
比如一百个房间，来了三百个不同的客人要入住，那么肯定就是有几个不同的客人挤在一个房间的情况，如果挤在一起的
客人不是同一个那么是不能去重的，所以hash冲突并不能决定这个值要不要去重。

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
设计一个二维坐标系point，实现hash方法和eq方法
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __hash__(self):
        return hash((self.x, self.y))

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

p1 = Point(4, 5)
p2 = Point(4, 5)
print(hash(p1),hash(p2))
print({p1,p2})

3. __bool__ 方法
class A:
    pass
print(bool(A()))
if A():
    print('AAAA')

class B:
    def __bool__(self):
        return False
print(bool(B))
print(bool(B()))
if B():  #Flase直接进不来，没有打印
    print('BBBBBBBBBBB')

class C:
    def __len__(self):
        return 0
print(bool(C()))
if C(): #Flase直接进不来，没有打印
    print('CCCCCCCCCCCCCCC')

执行结果：
True
AAAA
True
False
False

总结：
(1). bool值非真既假，定义一个类，如果这个类没有定义__bool__(),就找__len__()返回长度，只要这个长度非0就说明bool值
为真。如果连__len__()都没定义，那么一切实例都是真。
(2). bool值对于类来说都是真的
(3). __bool__() 调用的是内建函数bool()

4.可视化方法
可视化的方法有三种：
__repr__ ， __str__  ，__bytes__

class A:
    def __init__(self, name, age = 18):
        self.name =name
        self.age = age

    def __repr__(self):
        return 'repr: {},{}'.format(self.name, self.age)

    def __str__(self):
        return 'str:{},{}'.format(self.name, self.age)

    def __bytes__(self):
        return "{} is {}".format(self.name, self.age).encode() #字节码的打印
        import json #导入json
        return json.dumps(self.__dict__).encode() #字典序列化

print(1, A('tom'))
print(2, [A('tom')])
print(3, (A('tom'),))
print(4, {A('tom')})
print([str(A('tom'))])
print(bytes(A('tom')))

输出结果：
1 str:tom,18
2 [repr: tom,18]
3 (repr: tom,18,)
4 {repr: tom,18}
['str:tom,18']
b'tom is 18'

总结一下：
1.当repr与str同时出现时，列表，元组，集合这种容器类是会调用repr的，而第一种直接打印的方式和第五种用str转换
的方式，是走str这条路的。bytes这个是字节码的转换格式，与前两种不同。
2.如果去掉str方法，那么全部都走repr这里，如果去掉repr，第一种和第五种是走str路线的，中间的三种容器类打印是
走的系统默认的打印格式，并不是走str。
3.所以总的来说，str()，format()，print() 函数调用的时候，需要调用__str__方法来返回一种字符串的表达，如果没有定
义，就会调用__repr__方法返回字符串表达，如果__repr__也没有调用，那么就走object直接返回内存对象的地址信息。

print('str:a, 1')
s = '1'
print(s)
s1 = 'a'
print(s1)
print([s1],(s,))
print({s,'a'})
这里就是要注意不能通过是不是有引号来判断输出值的类型，并不是带引号的就是str格式，看一个输出值的格式要使用
type或者isinstance这两种方法

5.运算符重载
运算符重载 比较多，有21个，
其中有比较运算符6个：<，<=，==，>，>=，!=  分别对应的__lt__, __le__, __eq__, __gt__, __ge__, __ne__ 
算术运算符8个：+，-，*，/，%，//，**，divmod  分别对应的__add__, __sub__, __mul__, __truediv__, __mod__, 
__floordiv__, __pow__, __divmod__
另外单独有7个就地修改算术运算符：+=，-=，*=，/=，%=，//=，**=  分别对应的__iadd__, __isub__, __imul__, 
__itruediv__, __imod__, __ifloordiv__, __ipow__

例：
class Person:
    def __init__(self, name, age=18):
        self.name = name
        self.age = age
    def __sub__(self, other):
        return self.age - other.age
    def __isub__(self, other):
        return Person(self.name, self-other)

tom = Person('tom', 20)
jerry = Person('jerry', 25)

print(tom - jerry)
print(jerry.__sub__(tom))
print(id(tom))

tom -= jerry
print(tom.age, id(tom))

运算符重载的应用场景，面向对象实现的类有时需要做大量的运算，而运算符是这种运算在数学上最常见的表达方式。

6.容器的相关方法
__len__(self)  内建函数len(), 返回对象的长度，如果把对象当做容器类型来看，就如同list或者dict。bool()调用的时候，如果
没有__bool__()方法，则会看__len__()方法是否存在，存在即为真。

__iter__(self)  实现这个方法可以返回一个新的可迭代对象

__contains__(self, item)  in成员运算符，没有实现的话就调用__iter__方法遍历

__getitem__(self, item)  实现self[key]方式的访问。序列对象，key接受整数为索引，或者切片。对于set和dict，key为hashable。
key不存在引发KeyError异常

__setitem__(self, key, value)  和__getitem__的访问类似，是设置值的方法

__missing__(self, key)  字典或其子类使用__getitem__()调用时，如果key不存在调用该方法

class A(dict):
    def __missing__(self, key):
        print('missing key: ',key)
        return 1

a = A()
print(a['1234'])   

打印结果：
missing key:  1234
1


例：
class Cars:
    def __init__(self):
        self.items = [] #这里是本质，是核心，下面玩什么看你一开始初始化的是什么


    def __len__(self):
        return len(self.items)

    def __iter__(self):
        return iter(self.items)

    def __getitem__(self, #item, index): #修改形参，通过索引访问，看起来更像列表
        #return self.items[item]
          return self.items[index]

    def __setitem__(self, index, value): #索引赋值，如果items初始化是字典，这里形参改为key更合适
        self.items[index] = value

    def __str__(self):
        return str(self.items)

    def __add__(self, other):
        self.items.append(other)
        return self

    def additem(self, item):
        self.items.append(item)


car = Cars()

car.additem(1)
car.additem('abc')
car.additem(4)
car.additem(True)
car.additem(False)

print(car)
print(len(car))

for x in car:  #因为有__iter__()在，所以可以把car当做可迭代对象看
    print(x)

print(car[1]) #因为有__getitem__()
car[3] = 'III' #因为有__setitem__()
print(car)


7.可调用对象
__call__方法，实现了这个方法可以调用类的实例，将一个实例像方法一样的调用

class Adder:
    def __call__(self, *args, **kwargs):
        ret = 0
        for x in args:
            ret += x
        self.ret = ret
        return self.ret

add = Adder()
print(add(4,5,8,8)) #将一个实例像方法那样的调用


